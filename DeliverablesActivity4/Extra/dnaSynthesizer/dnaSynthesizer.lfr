// module dnasynthesizer (
//     finput in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10,
// control c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15,
// foutput [15:0] reactor_output
// );

//     flow intersection0, intersection1, intersection2, intersection3, intersection4;
//     flow c_out0, c_out1, c_out2, c_out3, c_out4, c_out5, c_out6, c_out7, c_out8, c_out9, c_out10, c_out11, c_out12, c_out13, c_out14, c_out15;

//     storage [15:0] reactor;
//     assign c_out0 = in0;
//     assign c_out0 = c0;
//     assign intersection0 = c_out0;

//     assign c_out1 = in1;
//     assign c_out1 = c1;
//     assign intersection0 = c_out1;

//     assign c_out2 = in2;
//     assign c_out2 = c2;
//     assign intersection0 = c_out2;

//     assign c_out3 = intersection0;
//     assign c_out3 = c3;
//     assign intersection1 = c_out3;

//     assign c_out4 = in3;
//     assign c_out4 = c4;
//     assign intersection1 = c_out4;

//     assign c_out5 = in4;
//     assign c_out5 = c5;
//     assign intersection1 = c_out5;

//     assign c_out6 = intersection1;
//     assign c_out6 = c6;
//     assign intersection2 = c_out6;

//     assign c_out7 = in5;
//     assign c_out7 = c7;
//     assign intersection2 = c_out7;

//     assign c_out8 = in6;
//     assign c_out8 = c8;
//     assign intersection2 = c_out8;

//     assign c_out9 = intersection2;
//     assign c_out9 = c9;
//     assign intersection3 = c_out9;

//     assign c_out10 = in7;
//     assign c_out10 = c10;
//     assign intersection3 = c_out10;

//     assign c_out11 = in8;
//     assign c_out11 = c11;
//     assign intersection3 = c_out11;

//     assign c_out12 = intersection3;
//     assign c_out12 = c12;
//     assign intersection4 = c_out12;

//     assign c_out13 = in9;
//     assign c_out13 = c13;
//     assign intersection4 = c_out13;

//     assign c_out14 = in10;
//     assign c_out14 = c14;
//     assign intersection4 = c_out14;

//     assign c_out15 = intersection4;
//     assign c_out15 = c15;

//     //MUX here
//     flow mux;

//     assign mux = c_out15;
//     assign reactor = mux;

//     assign reactor_output[0] = reactor[0];
// endmodule

module dnasynthesizer(
    finput[0:10] in,
    foutput [0:15] out,
    control [0:15] c
);

    flow path1, path2, path3, path4, controller_out;

    distribute@(c[0:2]) begin
        if (c[0] == 1) begin
            path1 <= path1 + in[0];
        end
        if (c[1] == 1) begin
            path1 <= path1 + in[1];
        end
        if (c[2] == 1) begin
            path1 <= path1 + in[2];
        end
    end

    distribute@(c[3:5]) begin
        if (c[3] == 1) begin
            path2 <= path2 + in[3];
        end
        if (c[4] == 1) begin
            path2 <= path2 + path1;
        end
        if (c[5] == 1) begin
            path2 <= path2 + in[4];
        end
    end

    distribute@(c[6:8]) begin
        if (c[6] == 1) begin
            path3 <= path3 + in[5];
        end
        if (c[7] == 1) begin
            path3 <= path3 + path2;
        end
        if (c[8] == 1) begin
            path3 <= path3 + in[6];
        end
    end

    distribute@(c[9:11]) begin
        if (c[9] == 1) begin
            path4 <= path4 + in[7];
        end
        if (c[10] == 1) begin
            path4 <= path4 + path3;
        end
        if (c[11] == 1) begin
            path4 <= path4 + in[8];
        end
    end

    distribute@(c[12:15]) begin
        if (c[12] == 1) begin
            path4 <= path4 + in[9];
        end
        if (c[13] == 1) begin
            path4 <= path4 + path3;
        end
        if (c[14] == 1) begin
            path4 <= path4 + in[10];
        end
        if (c[15] == 1) begin
            controller_out <= path4;
        end
    end

   
    storage [0:15] reactor;
    
    assign reactor = ~controller_out;

    assign out = reactor;
    
    endmodule